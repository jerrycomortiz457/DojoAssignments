class Node{constructor(data,left=null,right=null){this.data=data,this.left=left,this.right=right}}class BST{constructor(){this.root=null}add(data){const node=this.root;if(null!==node){const searchTree=function(node){if(data<node.data){if(null===node.left)return void(node.left=new Node(data));if(null!==node.left)return searchTree(node.left)}else{if(!(data>node.data))return null;if(null===node.right)return void(node.right=new Node(data));if(null!==node.right)return searchTree(node.right)}};return searchTree(node)}this.root=new Node(data)}findMin(){let current=this.root;for(;null!==current.left;)current=current.left;return current.data}findMax(){let current=this.root;for(;null!==current.right;)current=current.right;return current.data}find(data){let current=this.root;for(;current.data!==data;)if(null===(current=data<current.data?current.left:current.right))return null;return current}isPresent(data){let current=this.root;for(;current;){if(data===current.data)return!0;current=data<current.data?current.left:current.right}return!1}remove(data){const removeNode=function(node,data){if(null==node)return null;if(data==node.data){if(null==node.left&&null==node.right)return null;if(null==node.left)return node.right;if(null==node.right)return node.left;for(var tempNode=node.right;null!==tempNode.left;)tempNode=tempNode.left;return node.data=tempNode.data,node.right=removeNode(node.right,tempNode.data),node}return data<node.data?(node.left=removeNode(node.left,data),node):(node.right=removeNode(node.right,data),node)};this.root=removeNode(this.root,data)}isBalanced(){return this.findMinHeight()>=this.findMaxHeight()-1}findMinHeight(node=this.root){if(null==node)return-1;let left=this.findMinHeight(node.left),right=this.findMinHeight(node.right);return left<right?left+1:right+1}findMaxHeight(node=this.root){if(null==node)return-1;let left=this.findMaxHeight(node.left),right=this.findMaxHeight(node.right);return left>right?left+1:right+1}inOrder(){if(null==this.root)return null;{var result=new Array;function traverseInOrder(node){node.left&&traverseInOrder(node.left),result.push(node.data),node.right&&traverseInOrder(node.right)}return traverseInOrder(this.root),result}}preOrder(){if(null==this.root)return null;{var result=new Array;function traversePreOrder(node){result.push(node.data),node.left&&traversePreOrder(node.left),node.right&&traversePreOrder(node.right)}return traversePreOrder(this.root),result}}postOrder(){if(null==this.root)return null;{var result=new Array;function traversePostOrder(node){node.left&&traversePostOrder(node.left),node.right&&traversePostOrder(node.right),result.push(node.data)}return traversePostOrder(this.root),result}}levelOrder(){let result=[],Q=[];if(null!=this.root){for(Q.push(this.root);Q.length>0;){let node=Q.shift();result.push(node.data),null!=node.left&&Q.push(node.left),null!=node.right&&Q.push(node.right)}return result}return null}}const bst=new BST;bst.add(9),bst.add(4),bst.add(17),bst.add(3),bst.add(6),bst.add(22),bst.add(5),bst.add(7),bst.add(20),console.log(bst.findMinHeight()),console.log(bst.findMaxHeight()),console.log(bst.isBalanced()),bst.add(10),console.log(bst.findMinHeight()),console.log(bst.findMaxHeight()),console.log(bst.isBalanced()),console.log("inOrder: "+bst.inOrder()),console.log("preOrder: "+bst.preOrder()),console.log("postOrder: "+bst.postOrder()),console.log("levelOrder: "+bst.levelOrder());